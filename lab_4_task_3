def find(parent, x):
    if parent[x] != x:
        parent[x] = find(parent, parent[x])
    return parent[x]

def union(parent, rank, x, y):
    xroot = find(parent, x)
    yroot = find(parent, y)
    if xroot == yroot:
        return False
    if rank[xroot] < rank[yroot]:
        parent[xroot] = yroot
    else:
        parent[yroot] = xroot
        if rank[xroot] == rank[yroot]:
            rank[xroot] += 1
    return True

def main():
    n, m = map(int, input().split())
    edges = []
    for idx in range(m):
        u, v, w = map(int, input().split())
        edges.append((w, u - 1, v - 1, idx + 1))

    edges.sort()  

    parent = list(range(n))
    rank = [0] * n

    mst_weight = 0
    mst_edges = []

    for w, u, v, idx in edges:
        if union(parent, rank, u, v):
            mst_weight += w
            mst_edges.append(idx)
            if len(mst_edges) == n - 1:
                break

    if len(mst_edges) != n - 1:
        print(-1)
    else:
        print(mst_weight)
        for idx in mst_edges:
            print(idx)

if __name__ == "__main__":
    main()
